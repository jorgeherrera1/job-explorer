---
import type { Job, JobDetails } from '../types';
import SkillsSection from './SkillsSection.astro';

interface Props {
  job: Job;
  jobDetails?: JobDetails | null;
}

const { job, jobDetails } = Astro.props;

// Helper function to get country flags based on country names
function getCountryFlag(country: string): string {
  const flagMap: Record<string, string> = {
    'Argentina': '/icon/ar.svg',
    'Brazil': '/icon/br.svg',
    'Costa Rica': '/icon/cr.svg',
    'Mexico': '/icon/mx.svg',
    'USA': '/icon/us.svg'
  };
  
  return flagMap[country] || '/icon/job-codes.svg';
}

// Regional codes based on the job's jobCodes
const regionalCodes = Object.entries(job.jobCodes).map(([country, code]) => ({
  country,
  code,
  flag: getCountryFlag(country) // Use the country name to determine flag
}));
---

<div class="h-full flex flex-col" transition:name="job-details">
  <!-- Job Header -->
  <div class="bg-white p-6 border-b border-gray-200">
    <!-- Single row with 4 columns, no separators -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6" transition:name={`job-info-${job.id}`}>
      <div>
        <div class="text-sm text-gray-600 mb-1">Job Position</div>
        <div class="font-bold text-gray-900" transition:name={`job-title-${job.id}`}>{job.jobTitle}</div>
      </div>
      
      <div>
        <div class="text-sm text-gray-600 mb-1">Main Skill</div>
        <div class="font-semibold text-gray-900">{job.mainSkill}</div>
      </div>
      
      <div>
        <div class="text-sm text-gray-600 mb-1">Level</div>
        <div class="font-semibold text-gray-900">{job.level.code}-{job.level.name}</div>
      </div>
      
      <div>
        <div class="text-sm text-gray-600 mb-1">Guild</div>
        <div class="font-semibold text-gray-900">{job.guild}</div>
      </div>
    </div>


    <!-- Tabs - Center aligned -->
    <div class="flex justify-center border-gray-200" transition:name="job-tabs">
      <button 
        class="px-4 py-2 text-sm font-medium border-b-2 border-blue-500 text-blue-600 tab-button"
        data-tab="general"
      >
        General
      </button>
      <button 
        class="px-4 py-2 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 tab-button"
        data-tab="responsibilities"
      >
        Responsibilities
      </button>
      <button 
        class="px-4 py-2 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 tab-button"
        data-tab="technical-skills"
      >
        Technical Skills
      </button>
      <button 
        class="px-4 py-2 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 tab-button"
        data-tab="foundational-skills"
      >
        Foundational Skills
      </button>
    </div>
  </div>

  <!-- Tab Content -->
  <div class="flex-1 overflow-y-auto p-6" transition:name={`job-content-${job.id}`}>
    <!-- General Tab -->
    <div id="general-tab" class="tab-content">
      <!-- Regional codes section moved from header -->
      <div class="mb-6">
        <div class="flex items-center gap-2 mb-3">
          <img src="/icon/job-codes.svg" alt="Job Codes" class="w-6 h-6" />
          <span class="text-sm font-medium text-blue-600">Job Codes</span>
        </div>
        <div class="flex flex-wrap gap-2">
          {regionalCodes.map(({ country, code, flag }) => (
            <button 
              class="flex items-center gap-2 bg-white px-3 py-1.5 rounded-full border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer regional-code-btn shadow-sm"
              data-code={code}
              title={`Click to copy ${code}`}
            >
              <img src={flag} alt={country} class="w-5 h-5 rounded-full" />
              <span class="text-sm font-semibold text-gray-700">{code}</span>
            </button>
          ))}
        </div>
      </div>

      <!-- Job Description section -->
      <div class="flex items-center gap-2 mb-4">
        <img src="/icon/job-description.svg" alt="Job Description" class="w-6 h-6" />
        <span class="text-sm font-medium text-blue-600">Job Description</span>
      </div>
      <div class="prose prose-sm max-w-none text-gray-700">
        {jobDetails?.mission ? (
          <p>{jobDetails.mission}</p>
        ) : (
          <p class="text-gray-500 italic">
            Loading job description...
          </p>
        )}
      </div>

      {/* Years of Experience Section */}
      {jobDetails?.experiences && jobDetails.experiences.length > 0 && (
        <div class="mt-6">
          <div class="flex items-center gap-2 mb-4">
            <img src="/icon/experience.svg" alt="Experience" class="w-6 h-6" />
            <span class="text-sm font-medium text-blue-600">Experience</span>
          </div>
          <div class="prose prose-sm max-w-none text-gray-700">
            {jobDetails.experiences.map((experience, index) => (
              <div key={index}>
                {experience.title}: {experience.content.join(', ')}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
    
    <!-- Responsibilities Tab -->
    <div id="responsibilities-tab" class="tab-content hidden">
      {jobDetails?.responsibilities && jobDetails.responsibilities.length > 0 ? (
        <!-- Fluid responsive grid - more columns on wider screens, fewer on narrow -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {jobDetails.responsibilities.map(resp => (
            <div class="flex items-start gap-4">
              <img src="/icon/responsibility.svg" alt="Responsibility" class="w-6 h-6" />
              <div class="min-w-0 flex-1">
                <h4 class="font-medium text-gray-900">{resp.responsibilityArea}</h4>
                <p class="text-gray-700 text-sm">{resp.responsibilityDescription}</p>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="text-center py-12 text-gray-500">
          <p>This job does not have responsibilities.</p>
        </div>
      )}
    </div>
    
    <!-- Technical Skills Tab -->
    <div id="technical-skills-tab" class="tab-content hidden">
      <SkillsSection 
        skills={jobDetails?.technicalSkills || []}
        emptyMessage="This job does not have technical skills defined."
      />
    </div>
    
    <!-- Foundational Skills Tab -->
    <div id="foundational-skills-tab" class="tab-content hidden">
      <SkillsSection 
        skills={jobDetails?.foundationalSkills || []}
        emptyMessage="This job does not have foundational skills defined."
      />
    </div>
  </div>
</div>

<!-- Popover for copy confirmation -->
<div id="copy-popover" class="fixed z-50 px-3 py-2 bg-black text-white text-sm rounded-lg shadow-lg opacity-0 pointer-events-none transition-opacity duration-200" style="transform: translate(-50%, -100%);">
  <div class="flex items-center gap-2">
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M5 13l4 4L19 7"></path>
    </svg>
    <span>Copied to clipboard!</span>
  </div>
  <!-- Arrow pointing down -->
  <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-black"></div>
</div>

<script>
  // Tab and copy functionality that works with Astro view transitions
  function initializeTabFunctionality() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    const regionalCodeButtons = document.querySelectorAll('.regional-code-btn');
    const copyPopover = document.getElementById('copy-popover');

    // Tab functionality
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');
        
        // Remove active state from all buttons
        tabButtons.forEach(btn => {
          btn.classList.remove('border-blue-500', 'text-blue-600');
          btn.classList.add('border-transparent', 'text-gray-500');
        });
        
        // Add active state to clicked button
        button.classList.remove('border-transparent', 'text-gray-500');
        button.classList.add('border-blue-500', 'text-blue-600');
        
        // Hide all tab contents
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        
        // Show target tab content
        const targetContent = document.getElementById(`${targetTab}-tab`);
        if (targetContent) {
          targetContent.classList.remove('hidden');
        }
      });
    });

    // Technical and foundational skills chevron rotation functionality
    const allSkillsDetails = document.querySelectorAll('#technical-skills-tab details, #foundational-skills-tab details');
    allSkillsDetails.forEach(details => {
      const chevronIcon = details.querySelector('.chevron-icon') as SVGElement;
      
      details.addEventListener('toggle', () => {
        if (chevronIcon) {
          if ((details as HTMLDetailsElement).open) {
            chevronIcon.style.transform = 'rotate(180deg)';
          } else {
            chevronIcon.style.transform = 'rotate(0deg)';
          }
        }
      });
    });

    // Regional code copy functionality
    regionalCodeButtons.forEach(button => {
      button.addEventListener('click', async (event) => {
        const target = event.target as HTMLElement;
        const buttonElement = target?.closest('button') as HTMLButtonElement;
        const code = buttonElement?.getAttribute('data-code');
        
        if (!code) return;
        
        try {
          // Copy to clipboard
          await navigator.clipboard.writeText(code);
          
          // Show popover
          showCopyPopover(buttonElement);
        } catch (err) {
          console.error('Failed to copy to clipboard:', err);
          // Fallback for older browsers
          fallbackCopyToClipboard(code);
          showCopyPopover(buttonElement);
        }
      });
    });

    // Function to show copy confirmation popover
    function showCopyPopover(targetButton: HTMLButtonElement | null) {
      if (!copyPopover || !targetButton) return;
      
      // Position the popover above the clicked button
      const buttonRect = targetButton.getBoundingClientRect();
      
      copyPopover.style.left = `${buttonRect.left + buttonRect.width / 2}px`;
      copyPopover.style.top = `${buttonRect.top - 10}px`;
      
      // Show popover
      copyPopover.classList.remove('opacity-0');
      copyPopover.classList.add('opacity-100');
      
      // Hide popover after 2 seconds
      setTimeout(() => {
        copyPopover.classList.remove('opacity-100');
        copyPopover.classList.add('opacity-0');
      }, 2000);
    }

    // Fallback copy function for older browsers
    function fallbackCopyToClipboard(text: string) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      try {
        document.execCommand('copy');
      } catch (err) {
        console.error('Fallback copy failed:', err);
      }
      
      document.body.removeChild(textArea);
    }
  }

  // Initialize on initial page load
  document.addEventListener('DOMContentLoaded', initializeTabFunctionality);
  
  // Re-initialize on Astro view transitions
  document.addEventListener('astro:page-load', initializeTabFunctionality);
</script> 