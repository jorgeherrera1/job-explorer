---
import Layout from '../../../layouts/Layout.astro';
import SearchFilterControls from '../../../components/SearchFilterControls.tsx';
import FilterTags from '../../../components/FilterTags.tsx';
import JobList from '../../../components/JobList.tsx';
import JobDetails from '../../../components/JobDetails.astro';

import { getCollection } from 'astro:content';
import { LANGUAGES, isValidLanguage } from '../../../utils/languages.js';
import { fetchJobDetails } from '../../../utils/jobDetailsApi.js';

export async function getStaticPaths() {
  const jobEntries = await getCollection('jobs');
  
  const paths = [];
  
  for (const entry of jobEntries) {
    for (const language of LANGUAGES) {
      paths.push({
        params: { 
          jobCode: entry.id, 
          lang: language.code 
        },
        props: { 
          job: { id: entry.id, ...entry.data },
          language: language.code
        }
      });
    }
  }
  
  return paths;
}

const { jobCode, lang } = Astro.params;
const { job, language } = Astro.props;

// Validate language
if (!isValidLanguage(lang)) {
  return Astro.redirect(`/jobs/${jobCode}/en`);
}

// Fetch job details from API
const jobDetails = await fetchJobDetails(job.validJobRootId, language);

// Get all jobs for the job list
const jobEntries = await getCollection('jobs');
const jobs = jobEntries.map(entry => ({
  id: entry.id,
  ...entry.data
}));

// Pre-calculate filter options for better performance
const guilds = [...new Set(jobs.map(job => job.guild))];
const mainSkills = [...new Set(jobs.map(job => job.mainSkill))];
const levels = [...new Set(jobs.map(job => `${job.level.code}-${job.level.name}`))];
---

<Layout>
  <SearchFilterControls 
    slot="search-controls"
    client:load
    guilds={guilds}
    mainSkills={mainSkills}
    levels={levels}
    jobs={jobs}
  />
  
  <FilterTags 
    slot="filter-tags"
    client:load
    jobs={jobs}
  />
  
  <div slot="job-list-header" class="text-sm text-gray-600 text-center">
    Select a Job Position to see the description
  </div>
  
  <JobList 
    slot="job-list"
    client:load 
    jobs={jobs}
    selectedJobId={job.id}
    currentLanguage={language}
  />
  
  <!-- Job details with the selected job and API data -->
  <JobDetails slot="job-details" job={job} jobDetails={jobDetails} />
</Layout> 